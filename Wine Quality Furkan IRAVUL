import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import mean_squared_error, r2_score, accuracy_score, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score, classification_report
from sklearn.ensemble import RandomForestClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import GradientBoostingClassifier



# *************** Veri Yükleme ve Keşifsel Veri Analizi ***************
# Veri setini yükle
data = pd.read_csv(r"winequality-white.csv", sep=';')

print("Veri setinin ilk 5 satırı:\n", data.head())
print("\nVeri setinin boyutu:", data.shape)
print("\nVeri setinin istatistiksel özeti:\n", data.describe())
print("\nEksik değerler:\n", data.isnull().sum())
print("\nHer Sütunun Ortalaması:")
print(data.mean())

std_dev = data.std()
min_values = data.min()
max_values = data.max()
print("\nHer Sütunun Standart Sapması:")
print(std_dev)
print("\nHer Sütunun Minimum Değeri:")
print(min_values)
print("\nHer Sütunun Maksimum Değeri:")
print(max_values)


# histogram çizme
numerical_columns = data.select_dtypes(include=['float64', 'int64']).columns
for column in numerical_columns:
    plt.figure(figsize=(7, 5))
    sns.histplot(data[column], kde=True, bins=30)  # Bins ile aralık sayısını belirlenir.
    plt.title(f"{column} Histogram")
    plt.xlabel(column)
    plt.ylabel("Frekans")
    plt.xticks(rotation=45, ha='right')
    plt.tight_layout()
    plt.show()

# Korelasyon matrisini hesapla
correlation_matrix = data.corr()
# Korelasyon matrisini ısı haritası olarak görselleştir
plt.figure(figsize=(12, 8))
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)
plt.title("Korelasyon Matrisi")
plt.show()





# *************** Lineer Regresyon Modeli ***************
# Bağımsız değişkenler (X) ve bağımlı değişken (Y) ayırma
X = data.drop('quality', axis=1)
Y = data['quality']

# Verileri ölçeklendirme
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Eğitim ve test veri setlerine ayırma
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.1, random_state=42)

# Lineer Regresyon Modeli
model = LinearRegression()
model.fit(X_train, Y_train)
Y_pred = model.predict(X_test)

# Model performansını değerlendirme
mse = mean_squared_error(Y_test, Y_pred)
r2 = r2_score(Y_test, Y_pred)

print("\nStandart Ölçeklendirme Sonrası Lineer Regresyon Modeli Performansı:")
print("Ortalama Kare Hata (MSE):", mse)
print("R-kare değeri:", r2)

# Hataların dağılımını incelemek için
errors = Y_test - Y_pred
plt.figure(figsize=(10, 6))
sns.histplot(errors, kde=True)
plt.xlabel("Tahmin Hatası")
plt.ylabel("Frekans")
plt.title("Hata Dağılımı")
plt.show()
print("Hata Dağılımı Ortalaması:", np.mean(errors))

# Gerçek ve tahmin edilen değerler arasındaki ilişki
plt.figure(figsize=(10, 6))
plt.scatter(Y_test, Y_pred, alpha=0.5)
plt.xlabel("Gerçek Değerler")
plt.ylabel("Tahmin Edilen Değerler")
plt.title("Gerçek vs Tahmin Edilen Değerler")
plt.plot([Y_test.min(), Y_test.max()], [Y_test.min(), Y_test.max()], '--r')
plt.show()





# *************** Karar Ağacı Modeli ***************
def classify_quality(score):
    if score <= 4:
        return "kötü"
    elif score <= 7:
        return "orta"
    else:
        return "iyi"

data['quality_class'] = data['quality'].apply(classify_quality)

X = data.drop(['quality', 'quality_class'], axis=1)
Y = data['quality_class']

# Eğitim ve test veri setlerine ayırma
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, random_state=42)

# Verileri ölçeklendirme
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

tree_model = DecisionTreeClassifier(random_state=42)
tree_model.fit(X_train, Y_train)
Y_pred_tree = tree_model.predict(X_test)

accuracy = accuracy_score(Y_test, Y_pred_tree)
print("\nKarar Ağacı Modeli Performansı:")
print("Doğruluk Oranı:", accuracy)
print("\nSınıflandırma Raporu:\n", classification_report(Y_test, Y_pred_tree))

# Kalite puanlarını kümeleme ve görselleştirme
plt.figure(figsize=(7, 5))
sns.countplot(x='quality_class', data=data, order=["kötü", "orta", "iyi"])
plt.title("Kalite Puanlarının Sınıflara Göre Dağılımı")
plt.xlabel("Kalite")
plt.ylabel("Frekans")
plt.show()

# Karar Ağacı modelinin öznitelik önem sıralaması
tree_feature_importances = tree_model.feature_importances_

# Öznitelik önem sıralamasını görselleştirme
plt.figure(figsize=(10, 6))
sns.barplot(x=tree_feature_importances, y=X.columns)
plt.title("Karar Ağacı Öznitelik Önem Sıralaması")
plt.xlabel("Öznitelik Önemi")
plt.ylabel("Öznitelikler")
plt.show()






# *************** KNN Modeli ve En İyi K Değerinin Belirlenmesi ***************
# Performansları depolamak için boş bir liste
accuracy_scores = []

# 1'den 20'ye kadar K değerlerini deneyelim
for k in range(1, 21):
    knn_model = KNeighborsClassifier(n_neighbors=k)
    knn_model.fit(X_train_scaled, Y_train)
    Y_pred_knn = knn_model.predict(X_test_scaled)
    accuracy_scores.append(accuracy_score(Y_test, Y_pred_knn))

# En iyi K değeri
best_k = accuracy_scores.index(max(accuracy_scores)) + 1
print(f"En iyi K değeri: {best_k} ve doğruluk oranı: {max(accuracy_scores)}")

# En iyi K değeri ile KNN Modeli
best_knn_model = KNeighborsClassifier(n_neighbors=best_k)
best_knn_model.fit(X_train_scaled, Y_train)
Y_pred_best_knn = best_knn_model.predict(X_test_scaled)

# Performans Değerlendirme
best_knn_accuracy = accuracy_score(Y_test, Y_pred_best_knn)
print("\nEn İyi KNN Modeli Performansı:")
print("Doğruluk Oranı:", best_knn_accuracy)
print("\nSınıflandırma Raporu:\n", classification_report(Y_test, Y_pred_best_knn))

# K değerine göre doğruluk oranı grafiği
plt.figure(figsize=(10, 6))
plt.plot(range(1, 21), accuracy_scores, marker='o')
plt.title("K Değerine Göre Doğruluk Oranı")
plt.xlabel("K Değeri")
plt.ylabel("Doğruluk Oranı")
plt.xticks(range(1, 21))
plt.show()





# *************** Bayes Modeli ***************
X_scaled = scaler.fit_transform(X)

# Verileri eğitim ve test setlerine ayırma
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

# Bayes modelini tanımla ve eğit
nb_model = GaussianNB()
nb_model.fit(X_train, Y_train)

# Test verisi üzerinde tahmin yap
Y_pred_nb = nb_model.predict(X_test)

# Modelin performansını değerlendir
nb_accuracy = accuracy_score(Y_test, Y_pred_nb)
print("\nBayes Modeli Performansı:")
print("Doğruluk Oranı:", nb_accuracy)
print("\nSınıflandırma Raporu:\n", classification_report(Y_test, Y_pred_nb))


# *************** Random Forest Modeli ***************

# Verileri ölçeklendirme
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Bağımsız değişkenler (X) ve bağımlı değişken (Y) ayırma
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

# Random Forest Modeli
forest_model = RandomForestClassifier(n_estimators=100, random_state=42)
forest_model.fit(X_train, Y_train)
Y_pred_forest = forest_model.predict(X_test)

# Model Performansını Değerlendirme
forest_accuracy = accuracy_score(Y_test, Y_pred_forest)
print("\nRandom Forest Modeli Performansı:")
print("Doğruluk Oranı:", forest_accuracy)
print("\nSınıflandırma Raporu:\n", classification_report(Y_test, Y_pred_forest))

# Random Forest modelinin öznitelik önem sıralaması
feature_importances = forest_model.feature_importances_

# Öznitelik önem sıralamasını görselleştirme
plt.figure(figsize=(10, 6))
sns.barplot(x=feature_importances, y=X.columns)
plt.title("Random Forest Öznitelik Önem Sıralaması")
plt.xlabel("Öznitelik Önemi")
plt.ylabel("Öznitelikler")
plt.show()



# *************** Artificial Neural Network (ANN) Modeli ***************
# Verileri eğitim ve test setlerine ayırma
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

# ANN Modeli
ann_model = MLPClassifier(hidden_layer_sizes=(100, 50), max_iter=1000, random_state=42)
ann_model.fit(X_train, Y_train)
Y_pred_ann = ann_model.predict(X_test)

# Model Performansını Değerlendirme
ann_accuracy = accuracy_score(Y_test, Y_pred_ann)
print("\nArtificial Neural Network (ANN) Modeli Performansı:")
print("Doğruluk Oranı:", ann_accuracy)
print("\nSınıflandırma Raporu:\n", classification_report(Y_test, Y_pred_ann))



# *************** Gradient Boosting Regressor (GBR) Modeli ***************

# Verileri eğitim ve test setlerine ayırma
X_train, X_test, Y_train, Y_test = train_test_split(X_scaled, Y, test_size=0.2, random_state=42)

# GBR Modeli
gbr_model = GradientBoostingClassifier(n_estimators=100, learning_rate=0.1, max_depth=3, random_state=42)
gbr_model.fit(X_train, Y_train)
Y_pred_gbr = gbr_model.predict(X_test)

# Model Performansını Değerlendirme
gbr_accuracy = accuracy_score(Y_test, Y_pred_gbr)
print("\nGradient Boosting Regressor (GBR) Modeli Performansı:")
print("Doğruluk Oranı:", gbr_accuracy)
print("\nSınıflandırma Raporu:\n", classification_report(Y_test, Y_pred_gbr))




